// require statements


// Class declaration

// It provides helper methods injected to controller classes
// used to call view engine
var ControllerExtensions = function() { }


// Respond to client with data generated by view engine
//
// params - additional parameters to view engine to manipulate reply
ControllerExtensions.prototype.respond = function(params) {
  var viewContext = Core.ViewEngine.createViewContext();
  viewContext.viewModel = this.viewModel;
  viewContext.request  = this.request;
  viewContext.response = this.response;
  viewContext.controller = this.name;
  viewContext.action = this.action; 
 
  Core.ViewEngine.ViewManager.render(viewContext, params);  
}

// Loads ViewModel class for given action
//
// controller - controller name
// action - action name
ControllerExtensions.prototype.loadViewModel = function (controller, action) {
  var viewModelClass, vmFile;

  vmFile = Core.Config.core.viewModelPath + '/' + controller + '/' + action + '.js';
  console.log(vmFile);
  try {
    viewModelClass = require(vmFile).viewModel;  
    return new viewModelClass();
  } 
  catch(e) {
    return {};
  }
}

//
// Exposed public api
//

// Injects extension methods to controller instance
//
// controller - controller object
// action - action name being executed
exports.injectExtensions = function(controller, action) {
  controller.merge(ControllerExtensions.prototype);
  controller.viewModel = controller.loadViewModel(controller.name, controller.action);
}
